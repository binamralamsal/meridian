/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as MainRouteImport } from './routes/_main/route'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as MainIndexImport } from './routes/_main/index'
import { Route as AdminUsersImport } from './routes/admin/users'
import { Route as MainServicesImport } from './routes/_main/services'
import { Route as MainLoginImport } from './routes/_main/login'
import { Route as MainContactImport } from './routes/_main/contact'
import { Route as MainBlogsImport } from './routes/_main/blogs'
import { Route as MainAboutImport } from './routes/_main/about'
import { Route as AdminUsersNewImport } from './routes/admin/users_.new'

// Create/Update Routes

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const MainRouteRoute = MainRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const MainIndexRoute = MainIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRouteRoute,
} as any)

const AdminUsersRoute = AdminUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRouteRoute,
} as any)

const MainServicesRoute = MainServicesImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => MainRouteRoute,
} as any)

const MainLoginRoute = MainLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => MainRouteRoute,
} as any)

const MainContactRoute = MainContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => MainRouteRoute,
} as any)

const MainBlogsRoute = MainBlogsImport.update({
  id: '/blogs',
  path: '/blogs',
  getParentRoute: () => MainRouteRoute,
} as any)

const MainAboutRoute = MainAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => MainRouteRoute,
} as any)

const AdminUsersNewRoute = AdminUsersNewImport.update({
  id: '/users_/new',
  path: '/users/new',
  getParentRoute: () => AdminRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/_main/about': {
      id: '/_main/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof MainAboutImport
      parentRoute: typeof MainRouteImport
    }
    '/_main/blogs': {
      id: '/_main/blogs'
      path: '/blogs'
      fullPath: '/blogs'
      preLoaderRoute: typeof MainBlogsImport
      parentRoute: typeof MainRouteImport
    }
    '/_main/contact': {
      id: '/_main/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof MainContactImport
      parentRoute: typeof MainRouteImport
    }
    '/_main/login': {
      id: '/_main/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof MainLoginImport
      parentRoute: typeof MainRouteImport
    }
    '/_main/services': {
      id: '/_main/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof MainServicesImport
      parentRoute: typeof MainRouteImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersImport
      parentRoute: typeof AdminRouteImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexImport
      parentRoute: typeof MainRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/users_/new': {
      id: '/admin/users_/new'
      path: '/users/new'
      fullPath: '/admin/users/new'
      preLoaderRoute: typeof AdminUsersNewImport
      parentRoute: typeof AdminRouteImport
    }
  }
}

// Create and export the route tree

interface MainRouteRouteChildren {
  MainAboutRoute: typeof MainAboutRoute
  MainBlogsRoute: typeof MainBlogsRoute
  MainContactRoute: typeof MainContactRoute
  MainLoginRoute: typeof MainLoginRoute
  MainServicesRoute: typeof MainServicesRoute
  MainIndexRoute: typeof MainIndexRoute
}

const MainRouteRouteChildren: MainRouteRouteChildren = {
  MainAboutRoute: MainAboutRoute,
  MainBlogsRoute: MainBlogsRoute,
  MainContactRoute: MainContactRoute,
  MainLoginRoute: MainLoginRoute,
  MainServicesRoute: MainServicesRoute,
  MainIndexRoute: MainIndexRoute,
}

const MainRouteRouteWithChildren = MainRouteRoute._addFileChildren(
  MainRouteRouteChildren,
)

interface AdminRouteRouteChildren {
  AdminUsersRoute: typeof AdminUsersRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminUsersNewRoute: typeof AdminUsersNewRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminUsersRoute: AdminUsersRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminUsersNewRoute: AdminUsersNewRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof MainRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/about': typeof MainAboutRoute
  '/blogs': typeof MainBlogsRoute
  '/contact': typeof MainContactRoute
  '/login': typeof MainLoginRoute
  '/services': typeof MainServicesRoute
  '/admin/users': typeof AdminUsersRoute
  '/': typeof MainIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/users/new': typeof AdminUsersNewRoute
}

export interface FileRoutesByTo {
  '/about': typeof MainAboutRoute
  '/blogs': typeof MainBlogsRoute
  '/contact': typeof MainContactRoute
  '/login': typeof MainLoginRoute
  '/services': typeof MainServicesRoute
  '/admin/users': typeof AdminUsersRoute
  '/': typeof MainIndexRoute
  '/admin': typeof AdminIndexRoute
  '/admin/users/new': typeof AdminUsersNewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_main': typeof MainRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/_main/about': typeof MainAboutRoute
  '/_main/blogs': typeof MainBlogsRoute
  '/_main/contact': typeof MainContactRoute
  '/_main/login': typeof MainLoginRoute
  '/_main/services': typeof MainServicesRoute
  '/admin/users': typeof AdminUsersRoute
  '/_main/': typeof MainIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/users_/new': typeof AdminUsersNewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/admin'
    | '/about'
    | '/blogs'
    | '/contact'
    | '/login'
    | '/services'
    | '/admin/users'
    | '/'
    | '/admin/'
    | '/admin/users/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/about'
    | '/blogs'
    | '/contact'
    | '/login'
    | '/services'
    | '/admin/users'
    | '/'
    | '/admin'
    | '/admin/users/new'
  id:
    | '__root__'
    | '/_main'
    | '/admin'
    | '/_main/about'
    | '/_main/blogs'
    | '/_main/contact'
    | '/_main/login'
    | '/_main/services'
    | '/admin/users'
    | '/_main/'
    | '/admin/'
    | '/admin/users_/new'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  MainRouteRoute: typeof MainRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  MainRouteRoute: MainRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_main",
        "/admin"
      ]
    },
    "/_main": {
      "filePath": "_main/route.tsx",
      "children": [
        "/_main/about",
        "/_main/blogs",
        "/_main/contact",
        "/_main/login",
        "/_main/services",
        "/_main/"
      ]
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/users",
        "/admin/",
        "/admin/users_/new"
      ]
    },
    "/_main/about": {
      "filePath": "_main/about.tsx",
      "parent": "/_main"
    },
    "/_main/blogs": {
      "filePath": "_main/blogs.tsx",
      "parent": "/_main"
    },
    "/_main/contact": {
      "filePath": "_main/contact.tsx",
      "parent": "/_main"
    },
    "/_main/login": {
      "filePath": "_main/login.tsx",
      "parent": "/_main"
    },
    "/_main/services": {
      "filePath": "_main/services.tsx",
      "parent": "/_main"
    },
    "/admin/users": {
      "filePath": "admin/users.tsx",
      "parent": "/admin"
    },
    "/_main/": {
      "filePath": "_main/index.tsx",
      "parent": "/_main"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    },
    "/admin/users_/new": {
      "filePath": "admin/users_.new.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
